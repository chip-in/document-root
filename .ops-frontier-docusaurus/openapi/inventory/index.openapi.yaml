openapi: 3.1.1
info:
  title: Chip-in inventory API
  description: |-
    これはChip-in のインベントリにアクセスするためのAPIである。
    アクセス制御は別途OPAで実装される。その仕様は inventory.rego で記述されている。
  contact:
    email: mitsuru@procube.jp
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://127.0.0.1:8080
tags:
  - name: realm
    description: マイクロサービスをグループ化するための論理的な区分。'/' などパスとして使用できない文字を含むことはできない。
  - name: zone
    description: API Gateway で外部に露出するDNS上のゾーン
  - name: virtual-host
    description: ゾーンに紐づく仮想ホスト。
  - name: routing-chain
    description: API Gateway でのルーティングチェーン。
  - name: hub
    description: SPNのハブ。
  - name: service
    description: SPN経由で提供されるマイクロサービス
paths:

  /realms:
    get:
      tags:
        - realm
      summary: List all realms.
      description: Returns a list of all realms.
      operationId: listRealms
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Realm'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - realm
      summary: Update an existing realm.
      description: Update an existing realm by realm name.
      operationId: updateRealm
      parameters:
        - name: realm
          in: path
          description: realm name to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent realm in the SPN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Realm'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Realm'
        '400':
          description: Invalid realm name supplied
        '404':
          description: Realm not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - realm
      summary: Add a new realm.
      description: Add a new realm.
      operationId: addRealm
      parameters:
        - name: realm
          in: path
          description: realm name of the realm to add
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new realm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Realm'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Realm'
        '400':
          description: Invalid realm name supplied or the realm already exists
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /realms/{realm}:
    get:
      tags:
        - realm
      summary: Find realm by name.
      description: Returns a single realm.
      operationId: getRealmByName
      parameters:
        - name: realm
          in: path
          description: Name of realm to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Realm'
        '400':
          description: Invalid realm name supplied
        '404':
          description: Realm not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - realm
      summary: Deletes a realm.
      description: Delete a realm.
      operationId: deleteRealm
      parameters:
        - name: realm
          in: path
          description: Realm name to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Realm deleted
        '400':
          description: Invalid realm name value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /realms/{realm}/zones:
    put:
      tags:
        - zone
      summary: Update an existing zone.
      description: Update an existing zone by zone name.
      operationId: updateZone
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent zone in the SPN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '400':
          description: Invalid URN supplied
        '404':
          description: Zone not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - zone
      summary: Add a new zone to the SPN.
      description: Add a new zone to the realm.
      operationId: addZone
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new zone in the relam
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - zone
      summary: Finds Zones
      description: get list of zones.
      operationId: listZones
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zone'
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /realms/{realm}/zones/{zone}:
    get:
      tags:
        - zone
      summary: Find zone.
      description: Returns a single zone.
      operationId: getZone
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: zone to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '400':
          description: Invalid zone supplied
        '404':
          description: Zone not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - zone
      summary: Deletes a zone.
      description: Delete a zone.
      operationId: deleteZone
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: zone to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Zone deleted
        '400':
          description: Invalid zone value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /realms/{realm}/zones/{zone}/virtual-hosts:
    put:
      tags:
        - virtual-host
      summary: Update an existing virtual host.
      description: Update an existing virtual host by virtual host name.
      operationId: updateVirtualHost
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: Name of zone which virtual host belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent virtual host in the SPN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualHost'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualHost'
        '400':
          description: Invalid Name supplied
        '404':
          description: Virtual Host not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - virtual-host
      description: Add a new virtual host to the zone.
      operationId: addVirtualHost
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: Name of zone which virtual host belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new virtual host in the zone
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualHost'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualHost'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - virtual-host
      description: Finds Virtual Hosts
      operationId: listVirtualHosts
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: Name of zone which virtual host belogs to
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VirtualHost'
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /realms/{realm}/zones/{zone}/virtual-hosts/{virtualHost}:
    get:
      tags:
        - virtual-host
      summary: Find virtual host by name.
      description: Returns a single virtual host.
      operationId: getVirtualHostByName
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: Name of zone which virtual host belogs to
          required: true
          schema:
            type: string
        - name: virtualHost
          in: path
          description: Name of virtual host to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualHost'
        '400':
          description: Invalid Name supplied
        '404':
          description: Virtual Host not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - virtual-host
      summary: Deletes a virtual host.
      description: Delete a virtual host.
      operationId: deleteVirtualHost
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: Name of zone which virtual host belogs to
          required: true
          schema:
            type: string
        - name: virtualHost
          in: path
          description: Virtual Host URN to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Virtual Host deleted
        '400':
          description: Invalid Name value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /realms/{realm}/routing-chains/:
    put:
      tags:
        - routing-chain
      summary: Update an existing routing chain.
      description: Update an existing routing chain by routing chain name.
      operationId: updateRoutingChain
      parameters:
        - name: realm
          in: path
          description: relam which routing chain belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent routing chain in the Realm.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingChain'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingChain'
        '400':
          description: Invalid Name supplied
        '404':
          description: Routing Chain not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - routing-chain
      summary: Add a new routing chain to the Realm.
      description: Add a new routing chain to the realm.
      operationId: addRoutingChain
      parameters:
        - name: realm
          in: path
          description: relam which routing chain belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new routing chain in the realm.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingChain'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingChain'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - routing-chain
      summary: Finds Routing Chains
      description: get list of routing chains.
      operationId: listRoutingChains
      parameters:
        - name: realm
          in: path
          description: rel

  /realms/{realm}/routing-chains/{routingChainName}:
    get:
      tags:
        - routing-chain
      summary: Find routing chain by name.
      description: Returns a single routing chain.
      operationId: getRoutingChainByName
      parameters:
        - name: realm
          in: path
          description: relam which routing chain belogs to
          required: true
          schema:
            type: string
        - name: routingChainName
          in: path
          description: Name of routing chain to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingChain'
        '400':
          description: Invalid Name supplied
        '404':
          description: Routing Chain not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - routing-chain
      summary: Deletes a routing chain.
      description: Delete a routing chain.
      operationId: deleteRoutingChain
      parameters:
        - name: realm
          in: path
          description: relam which routing chain belogs to
          required: true
          schema:
            type: string
        - name: routingChainName
          in: path
          description: Routing Chain URN to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Routing Chain deleted
        '400':
          description: Invalid Name value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /realms/{realm}/hubs:
    put:
      tags:
        - hub
      summary: Update an existing hub.
      description: Update an existing hub by hub name.
      operationId: updateHub
      parameters:
        - name: realm
          in: path
          description: relam which hub belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent hub in the SPN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hub'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
        '400':
          description: Invalid Name supplied
        '404':
          description: Hub not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - hub
      summary: Add a new hub to the SPN.
      description: Add a new hub to the realm.
      operationId: addHub
      parameters:
        - name: realm
          in: path
          description: relam which hub belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new hub in the realm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hub'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - hub
      summary: Finds Hubs
      description: get list of hubs.
      operationId: listHubs
      parameters:
        - name: realm
          in: path
          description: relam which hub belogs to
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hub'
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /realms/{realm}/hubs/{hubName}:
    get:
      tags:
        - hub
      summary: Find hub by name.
      description: Returns a single hub.
      operationId: getHubByName
      parameters:
        - name: realm
          in: path
          description: relam which service belogs to
          required: true
          schema:
            type: string
        - name: hubName
          in: path
          description: Name of hub to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
        '400':
          description: Invalid Name supplied
        '404':
          description: Hub not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - hub
      summary: Deletes a hub.
      description: Delete a hub.
      operationId: deleteHub
      parameters:
        - name: hubName
          in: path
          description: Hub URN to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hub deleted
        '400':
          description: Invalid Name value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /realms/{realm}/hubs/{hubName}/services:
    put:
      tags:
        - service
      summary: Update an existing service.
      description: Update an existing service by service Name.
      operationId: updateService
      parameters:
        - name: realm
          in: path
          description: relam which service belogs to
          required: true
          schema:
            type: string
        - name: hubName
          in: path
          description: Name of hub which service belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent service in the SPN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid Name supplied
        '404':
          description: Service not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - service
      summary: Add a new service to the SPN.
      description: Add a new service to the realm.
      operationId: addService
      parameters:
        - name: realm
          in: path
          description: relam which service belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new service in the realm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - service
      summary: Finds Services
      description: get list of services.
      operationId: listServices
      parameters:
        - name: realm
          in: path
          description: relam which service belogs to
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /realms/{realm}/hubs/{hubName}/services/{serviceName}:
    get:
      tags:
        - service
      summary: Find service by urn.
      description: Returns a single service.
      operationId: getServiceByName
      parameters:
        - name: realm
          in: path
          description: relam which service belogs to
          required: true
          schema:
            type: string
        - name: hubName
          in: path
          description: Name of hub which service belogs to
          required: true
          schema:
            type: string
        - name: serviceName
          in: path
          description: URN of service to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid URN supplied
        '404':
          description: Service not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - service
      summary: Deletes a service.
      description: Delete a service.
      operationId: deleteService
      parameters:
        - name: serviceName
          in: path
          description: Service URN to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service deleted
        '400':
          description: Invalid URN value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Realm:
      type: object
      required:
        - name
        - title
        - cacert
        - disabled
      properties:
        name:
          type: string
          description: |-
            レルムの名前。URN の一部として使用される。
            文字列は小文字英字、数字、ハイフン、アンダースコアのみを含むことができる。
          example: example-realm
        title:
          type: string
          description: レルムの日本語名称です。
          example: CMSシステム
        description:
          type: string
          description: レルムの説明文です。
          example: CMSシステムのレルムです。
        cacert:
          type: string
          description: |-
            realm 配下の SPN hub で mTLSにおけるクライアント証明書を発行したCA局の証明書(PEM形式)の文字列
          example: |-
            -----BEGIN CERTIFICATE-----
            MIIDXTCCAkWgAwIBAgIJAL5z1Z2k5b4wMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
            ...
            -----END CERTIFICATE-----
        administrators:
          type: array
          items:
            type: string
          description: |-
            レルムの管理者のユーザID。ユーザの管理はインベントリでは行わない。認証サービス内でのみ管理され、ここではそのIDのみを参照する。
          example:
            - chip-in-admin@example.com
        expiredAt:
          type: string
          format: date-time
          description: |-
            レルムの有効期限。ISO8601形式で指定する。
            この日時を過ぎると、レルムの disabled フラグは true となり、関連するリソースへのアクセスが制限される。
          example: '2024-12-31T23:59:59Z'
        disabled:
          type: boolean
          description: |-
            レルムが無効化されているかどうかを示すフラグ。
            true の場合、レルムは無効化されており、関連するリソースへのアクセスが制限される。
            false の場合、レルムは有効であり、通常の操作が可能である。
          example: false
    Zone:
      type: object
      required:
        - zone
        - title
        - realm
      properties:
        zone:
          type: string
          description: |-
            ゾーンの名前。FQDN のサフィックスとして使用される。
            文字列は小文字英字、数字、ハイフン、ピリオドのみを含むことができる。
          example: example.com
        title:
          type: string
          description: ゾーンの日本語名称です。
          example: CMSシステム検証環境ゾーン
        description:
          type: string
          description: ゾーンの説明文ですです。
          example: CMSシステムの検証環境用のゾーンです。
        realm:
          type: string
          description: |-
            ゾーンが属するレルムの名前。
        dnsProvider:
          type: string
          description: |-
            ゾーンのDNSレコードを管理するためのDNSプロバイダのURN。
          example: urn:chip-in:service:example-realm:example-zone-route53
        acmeCertificateProvider:
          type: string
          description: |-
            ゾーンのSSL/TLS証明書を自動的に取得するためのACME証明書プロバイダのURL
          example: https://acme-v02.api.letsencrypt.org/directory

    VirtualHost:
      type: object
      required:
        - name
        - title
        - routingChain
      properties:
        name:
          type: string
          description: |-
            仮想ホストの名前。所属するゾーンの名前と結合して FQDN を得ることができる。また、ピリオドを含めてサブドメイン化することもできる。
            たとえば、 www.stg という仮想ホスト名でゾーンの名前が example.com の場合、FQDN は www.stg.example.com となる。
          example: www.stg
        title:
          type: string
          example: CMSシステム
        description:
          type: string
          example: CMSシステムのWebUI を提供する仮想ホストです。
        routingChain:
          type: string
          description: |-
            この仮想ホストに紐づくルーティングチェーンのURN。
            ルーティングチェーンは、リクエストの処理を行うためのルールの集合であり、リクエストを適切なマイクロサービスに転送するためのロジックを定義する。
          example: urn:chip-in:routing-chain:example-realm:cms-chain
        certificate:
          type: array
          items:
            type: string
            description: |-
              この仮想ホストのサーバ証明書。PEM形式の証明書を指定する。
              証明書は、HTTPS通信を行うために必要であり、仮想ホストが提供するサービスのセキュリティを確保する。
            example: |-
              -----BEGIN CERTIFICATE-----
              MIIDXTCCAkWgAwIBAgIJAL5z1Z2k5b4wMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
              ...
              -----END CERTIFICATE-----
        key:
          type: string
          description: |-
            この仮想ホストのサーバ証明書の秘密鍵。PEM形式の秘密鍵を指定する。
            秘密鍵は、HTTPS通信を行うために必要であり、仮想ホストが提供するサービスのセキュリティを確保する。
          example: |-
            -----BEGIN RSA PRIVATE KEY-----
            MIIEpAIBAAKCAQEA7v1z1Z2k5b4wMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNVBAYT
            ...
            -----END RSA PRIVATE KEY-----
        disabled:
          type: boolean
          description: |-
            仮想ホストが無効化されているかどうかを示すフラグ。
            true の場合、仮想ホストは無効化されており、仮想ホストは削除され、アクセスは拒否される（TLSの場合、SSL_ERROR_HANDSHAKE_FAILURE を返し、平文の場合、400 Bad Request が返す）。
            false の場合、仮想ホストは有効であり、アクセスが可能である。
          example: false

    RoutingChain:
      type: object
      required:
        - name
        - urn
        - title
        - realm
      properties:
        name:
          type: string
          description: |-
            ルーティングチェーンの名前。URN の一部として使用される。
            文字列は小文字英字、数字、ハイフン、アンダースコアのみを含むことができる。
          example: cms-chain
        urn:
          type: string
          readOnly: true
          description: |-
            ルーティングチェーンのurn。
          example: urn:chip-in:routing-chain:example-realm:cms-chain
        title:
          type: string
          description: |-
            ルーティングチェーンの日本語名称です。
          example: CMSシステムルーティングチェーン
        description:
          type: string
          description: |-
            ルーティングチェーンの説明文です。
            
          example: CMSシステムのWebUI を提供するルーティングチェーンです。
        rules:
          type: array
          description: |-
            ルーティングチェーンのルールのリスト。各ルールは、リクエストを処理するための条件とアクションを定義する。
            ルールは、リクエストのパスやヘッダなどを照合し、適切なアクションを実行するために使用される。
          items:
            type: object
            required:
              - match
              - action
            description: |-
              ルーティングチェーンのルール。各ルールは、リクエストを処理するための条件とアクションを定義する。
              ルールは、リクエストのパスやヘッダなどを照合し、
              適切なアクションを実行するために使用される。
            properties:
              match:
                type: string
                description: |-
                  [RHAI](https://rhai.rs/book/about/features.html) の式で、リクエストのパスやヘッダなどを照合するための条件を記述する。
                example: request.path.starts_with("/api") && request.headers["X-Auth-Token"]
              action:
                oneOf:
                  - type: object
                    title: Proxy
                    description: |-
                      リクエストをプロキシ先のサービスに転送するためのアクション。
                      前フェーズまでで作成されたレスポンスは破棄され、プロキシ先サービスから返却されたものが新しいレスポンスとなる。
                      このアクションは、リクエストを別のマイクロサービスに転送するために使用される。
                    properties:
                      type:
                        type: string
                        enum: [proxy]
                      target:
                        type: string
                        description: |-
                          プロキシ先サービスのURN。
                        example: '"urn:chip-in:service:example-realm:cms-service"'
                      noBody:
                        type: boolean
                        description: |-
                          true の場合、リクエストボディは転送されない。
                          デフォルトは false で、リクエストボディは転送される。
                        example: false
                  - type: object
                    title: Redirect
                    description: |-
                      リダイレクトを行うためのアクション。レスポンスの stauts は 302 に設定される。
                      リダイレクト先のURLは、レスポンスの Location ヘッダに設定される。
                      このアクションは、リクエストを別のURLに転送するために使用される。
                    properties:
                      type:
                        type: string
                        enum: [redirect]
                      target:
                        type: string
                        description: |-
                          レスポンスの Location ヘッダに設定されるリダイレクト先のURL。
                        example: https://idp.example.com/login
                  - type: object
                    title: Jump
                    description: |-
                      別のルーティングチェーンにリクエストを転送するためのアクション。処理中のチェーンは終了し、転送先のチェーンが新たに開始される。
                    properties:
                      type:
                        type: string
                        enum: [jump]
                      target:
                        type: string
                        description: |-
                          ルーティングチェーンのURN。
                        example: urn:chip-in:routing-chain:example-realm:cms-chain
                  - type: object
                    title: AccessLog
                    description: |-
                      アクセスログを出力する。
                    properties:
                      type:
                        type: string
                        enum: [accessLog]
                      target:
                        type: string
                        description: |-
                          ログ出力サービスのURN。
                        example: urn:chip-in:servies:example-realm:access-log-service
                      format:
                        type: object
                        description: |-
                          ログ出力のフォーマット。RHAI の式で、リクエストやレスポンスの情報を参照してログ出力する。
                        example:
                          timestamp: "now()"
                          method: "request.method"
                          path: "request.path"
                          status: "response.status"
                          user: "request.user"
                          groups: "request.groups"
                          role: "request.role"
                          clientIp: "request.clientIp"
                          xff: "request.headers['X-Forwarded-For']"
                          userAgent: "request.headers['User-Agent']"
                          requestTime: "request.time"
                          tat: "response.tat"
                          upstreamStatus: "response.upstreamStatus"
                          upsstreamTAT: "response.upstreamTAT"
                        additionalProperties:
                          type: string
                          description: |-
                            RHAI の式で、リクエストやレスポンスの情報を参照して値を算出する。ただし、結果が undefined や null の場合は "-" となる。

    Hub:
      type: object
      required:
        - name
        - realm
        - urn
        - title
        - fqdn
        - serverCert
        - serverCertKey
      properties:
        name:
          type: string
          description: |-
            SPN Hub の名前。URN の一部として使用される。
            文字列は小文字英字、数字、ハイフン、アンダースコアのみを含むことができる。
          example: hub1
        realm:
          type: string
          description: |-
            SPN Hub が属する realm の名前。URN の一部として使用される。
          example: example-realm
        urn:
          type: string
          readOnly: true
          description: |-
            SPN Hub のURN。URNは、SPN Hubを一意に識別するための文字列で、以下の形式で構成される。
            urn:chip-in:network:{realm}:{name}
          example: urn:chip-in:network:example-realm:hub1
        title:
          type: string
          description: SPN Hub の日本語名称です。
          example: CMSシステムプライベートネットワークハブ
        description:
          type: string
          description: SPN Hub の説明文です。
          example: CMSシステム用のプライベートネットワークのハブ
        fqdn:
          type: string
          description: SPN Hub のサーバのFQDN
          example: core.stg.chip-in.net
        serverPort:
          type: integer
          description: SPN Hub のサーバのポート番号。デフォルトは 443
          example: 443
        serverCert:
          type: string
          description: |-
            mTLSにおけるサーバ証明書(PEM形式)の文字列。
            SPN Hub のサーバは、この証明書を使用してクライアントとの通信を暗号化する。
          example: |-
            -----BEGIN CERTIFICATE-----
            MIIDXTCCAkWgAwIBAgIJAL5z1Z2k5b4wMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
            ...
            -----END CERTIFICATE-----
        serverCertKey:
          type: string
          description: |-
            mTLSにおけるサーバ証明書の秘密鍵(PEM形式)の文字列。
            SPN Hub のサーバは、この秘密鍵を使用してクライアントとの通信を暗号化する。
          example: |-
            -----BEGIN RSA PRIVATE KEY-----
            MIIEpAIBAAKCAQEA7v1z1Z2k5b4wMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNVBAYT
            ...
            -----END RSA PRIVATE KEY-----

    Service:
      required:
        - name
        - urn
        - title
        - realm
        - hubName
        - providers
        - consumers
      type: object
      properties:
        name:
          type: string
          description: |-
            サービスの名前。URN の一部として使用される。
            文字列は小文字英字、数字、ハイフン、アンダースコアのみを含むことができる。
          example: authz-rbac
        urn:
          type: string
          readOnly: true
          description: |-
            サービスのURN。URNは、サービスを一意に識別するための文字列で、以下の形式で構成される。<br/>
            urn:chip-in:service:{realm}:{hubName}:{name}
          example: urn:chip-in:service:example-realm:hub1:authz-rbac
        title:
          type: string
          description: |-
            サービスの日本語名称です。URN の一部として使用される。
            文字列は日本語を含むことができる。
          example: CMSシステム認可サービス
        description:
          type: string
          description: |-
            サービスの説明文です。URN の一部として使用される。
            文字列は日本語を含むことができる。
          example: CMSシステムの認可サービスです。
        realm:
          type: string
          description: |-
            サービスが属するレルムの名前。
        hubName:
          type: string
          description: |-
            サービスが接続される SPN Hub の名前。
            SPN Hub は、サービスの提供を行うためのネットワークハブであり、サービスへのアクセスを管理する。
          example: hub1
        availabilityManagement:
          type: object
          required:
            - clusterManagerUrn
            - serviceId
          description: |-
            コンテナクラスタ内でマイクロサービスのスケジュール起動、オンデマンド起動を行うためのパラメータ
          properties:
            clusterManagerUrn:
              type: string
              description: このサービスを起動できるコンテナクラスタのクラスタマネージャサービスの URN
            serviceId:
              type: string
              description: クラスタ内でのマイクロサービスのID
            startAt:
              type: string
              description: 定時起動する場合の起動スケジュールの CRON 式
              example: 0 22 ? * SUN-THU *
            stopAt:
              type: string
              description: 定時停止する場合の起動スケジュールの CRON 式
              example: 0 9 ? * MON-FRI *
            ondemandStart:
              type: boolean
              description: オンデマンド起動とするか否か。デフォルトは true
            idelTimeout:
              type: int
              description: 通信がない状態が一定時間続くとマイクロ。 ondemadStart が true の場合のみ有効
        providers:
          type: array
          items:
            type: string
          description: |-
            当該サービスの提供が許可されるエンドポイント
            クライアント証明書の Subject の値と照合される
          example:
            - oidc-authz-provider
        consumers:
          type: array
          items:
            type: string
          description: |-
            当該サービスの利用が許可されるエンドポイント
            クライアント証明書の Subject の値と照合される
          example:
            - api-gateway
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Service:
      description: Service object that needs to be added to the SPN
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Service'
